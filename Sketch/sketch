// Global variables
// TODO add more variables (pin and other)
// Remark: Current ToDo's does not include writing to the database (putting new items to the Database);
#include <Servo.h>

const int button1Pin = 5; 	// pins used for buttons 2:5
const int button2Pin = 4;
const int button3Pin = 3;
const int button4Pin = 2;

const int ledPin = 13;	  	// used for testing
const int time = 2000;		// used for testing and servo movement: 2 seconds
							
int currentPos;				// position of Bottom Servo
							/// TODO: Position of the servo not implemented yet

Servo bottomServo; 			// Bottom Servo pin set to 6
Servo topServo;				// Top/Lid Servo pin set to 7
const int bottomServoPin = 6;
const int topServoPin = 7;
const int bottomServoTime = 2000;	// Use in case no extra sensor
const int topServoTime = 2000;		// Time of topServoMovement
const int lidOpenTime = 2000;		// Time lid will stay open
/// Servo movement speed controlled locally in MotorMovement


// This function will run at the start:
void setup() {
  
  /// TODO: get the position of the bottom servo and restore it to the default
  /// Remark: Servos work in a way that we can return it to it's initial position.
  
  Serial.begin(9600);

  pinMode(ledPin, OUTPUT);
  pinMode(button1Pin, INPUT);
  pinMode(button2Pin, INPUT);
  pinMode(button3Pin, INPUT);
  pinMode(button4Pin, INPUT);
}




//This function will run repeatedly after the start:
void loop() {
  
  // Check for button input
  int button = ButtonReader();
  if(button) {
    MotorMovement(button-1);
    return;
  }
  
  // Check for barcode input
  String barcodeSeq = BarcodeReader();
  if(!barcodeSeq.equals("Not detected")) {
  	Serial.print("Barcode detected: ");
    Serial.println(barcodeSeq);
    
    // Check Database and call motors if needed.
    int binNumber = BarcodeDetected(barcodeSeq);
    MotorMovement(binNumber);
    
    delay(time); // delay used for testing purposes;
    return;
  }
}






/*
	BarcodeDetected check is the sequence is in the Database
    @param seq -> the sequence of digits
	@return int -> the corresponding bin or residual */
int BarcodeDetected(String seq) {
   
  int inDatabase;
  /// TODO: Modify function to access Database
  
  inDatabase = 0; // testing value assuming that bins are numbered from 1 to 4
  if(inDatabase)
    return inDatabase;
  
  Serial.println("Not found in Database, awaiting button command");
  while(!inDatabase)
    inDatabase = ButtonReader();
  
  return inDatabase;
}



/*
	MotorMovement first moves the bottom servo and then the top servo
    @param bin -> the bin number where the trash should go
    TODO: Timing (time) of servo movement not calculated
    Remark: Problem:
    	Bins will get misalligned
    Possible solution: 
    	Use a sensor (2euro) to detect position
    	Put it under the bins and append a coulourful piece from the bins*/
void MotorMovement(int bin) {
    
  Serial.println("First Servo movement start...");
  ///TODO: set the timer or location given the different positions
  bottomServo.attach(bottomServoPin);
  bottomServo.write(45);
  delay(bottomServoTime);	//Instead of delay check for sensorInput
  bottomServo.write(90);
  bottomServo.detach();
  
  Serial.println("First Servo movement finished!");
  
  
  /// TODO: Store the new position of bottom Servo in SD card
  /// 		Or return the bins to their initial position.
  
  Serial.println("Second Servo movement start...");
  
  topServo.attach(topServoPin);
  topServo.write(45);
  delay(topServoTime);
  
  topServo.detach();
  delay(lidOpenTime);
  
  topServo.attach(topServoPin);
  topServo.write(135);
  delay(topServoTime);
  
  topServo.write(90);
  topServo.detach();
  
  Serial.println("Second Servo movement finished!");
}



/*
	BarcodeReader looks for the values received through the camera
    @return -> sequece of digits / "Not Detected" */
String BarcodeReader() {
  String s = "Not detected";
    
  /// TODO: Modify function to read from the scanner
    
  Serial.println("Went through BarcodeReader");
  return s;
}






/*
	BurronReader awaits value change from the buttons
    @return -> the button pressed / 0 if nothing is pressed 
    Remark: Possible problems:
    	if a button gets stuck we are doomed :) 
        if multiple buttons are pressed at the same time... 
        	... behavior can't be predicted*/
int ButtonReader() {
  int buttonPressed = digitalRead(button1Pin);
  buttonPressed = max(buttonPressed,digitalRead(button2Pin)*2);
  buttonPressed = max(buttonPressed,digitalRead(button3Pin)*3);
  buttonPressed = max(buttonPressed,digitalRead(button4Pin)*4);
  
  /*
  //Uncomment for testing
  if(buttonPressed)
  {
    Serial.print("Button pressed: ");
    Serial.println(buttonPressed);
  }
  */
                          
  return buttonPressed;
}
